<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ivony.Web.Mvc</name>
    </assembly>
    <members>
        <member name="T:Ivony.Web.ExtController">
            <summary>
            扩展 Controller ，提供WebSocket和JSONP支持
            </summary>
        </member>
        <member name="M:Ivony.Web.ExtController.Jsonp(System.Object,System.String)">
            <summary>
            创建一个 JSONP 的 ActionResult
            </summary>
            <param name="data">数据对象</param>
            <param name="callback">回调方法（若没有或者为null，则此方法行为与　Json　方法相同）。</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Web.ExtController.WebSocket(System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task})">
            <summary>
            创建一个处理 WebSocket 请求的 ActionResult
            </summary>
            <param name="processer">处理 WebSocket 请求的方法</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Web.ExtController.WebSocket(System.Func{System.Net.WebSockets.WebSocket,System.Threading.Tasks.Task})">
            <summary>
            创建一个处理 WebSocket 请求的 ActionResult
            </summary>
            <param name="processer">处理 WebSocket 请求的方法</param>
            <returns></returns>
        </member>
        <member name="T:Ivony.Web.MvcRouteExtensions">
            <summary>
            关于 MVC 路由的一些扩展
            </summary>
        </member>
        <member name="M:Ivony.Web.MvcRouteExtensions.SimpleRouteTable(System.Web.Routing.RouteCollection)">
            <summary>
            获取内建的简单路由表实例，如果没有则创建一个。
            </summary>
            <param name="routes">系统路由集合</param>
            <returns>内建的简单路由表实例</returns>
        </member>
        <member name="M:Ivony.Web.MvcRouteExtensions.SimpleRouteTable(System.Web.Mvc.AreaRegistrationContext)">
            <summary>
            获取指定区域的简单区域路由表实例，如果没有则创建一个。
            </summary>
            <param name="context">区域注册上下文</param>
            <returns>内建的简单区域路由表实例</returns>
        </member>
        <member name="M:Ivony.Web.MvcRouteExtensions.MapAction(Ivony.Web.SimpleRouteTable,System.String,System.String,System.String,System.String[])">
            <summary>
            映射一个 Action 路由
            </summary>
            <param name="routeTable">简单路由表实例</param>
            <param name="urlPattern">URL 模式</param>
            <param name="controller">Controller 名称</param>
            <param name="action">Action 名称</param>
            <param name="queryKeys">可用于 QueryString 的路由值</param>
            <returns>返回简单路由表实例，便于链式注册</returns>
        </member>
        <member name="M:Ivony.Web.MvcRouteExtensions.MapDefaultRoute(Ivony.Web.SimpleRouteTable)">
            <summary>
            映射 MVC 默认路由规则
            </summary>
            <param name="routeTable">简单路由表实例</param>
            <returns>返回简单路由表实例，便于链式注册</returns>
        </member>
        <member name="M:Ivony.Web.MvcRouteExtensions.MapDefaultRoute(Ivony.Web.SimpleAreaRouteTable,System.String,System.String)">
            <summary>
            映射 MVC 默认路由规则
            </summary>
            <param name="routeTable">简单路由表实例</param>
            <param name="defaultController">默认的 Controller</param>
            <param name="defaultAction">默认的 Action</param>
            <returns>返回简单路由表实例，便于链式注册</returns>
        </member>
        <member name="M:Ivony.Web.MvcRouteExtensions.MapRoute(Ivony.Web.SimpleRouteTable,System.String,System.Object,System.String[])">
            <summary>
            映射一个路由规则
            </summary>
            <param name="routeTable">简单路由表实例</param>
            <param name="urlPattern">URL 模式</param>
            <param name="routeValues">默认/静态路由值</param>
            <param name="queryKeys">可用于 QueryString 的路由值</param>
            <returns>返回简单路由表实例，便于链式注册</returns>
        </member>
        <member name="M:Ivony.Web.MvcRouteExtensions.MapRoute(Ivony.Web.SimpleRouteTable,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String[])">
            <summary>
            映射一个路由规则
            </summary>
            <param name="routeTable">简单路由表实例</param>
            <param name="urlPattern">URL 模式</param>
            <param name="routeValues">默认/静态路由值</param>
            <param name="queryKeys">可用于 QueryString 的路由值</param>
            <returns>返回简单路由表实例，便于链式注册</returns>
        </member>
        <member name="M:Ivony.Web.MvcRouteExtensions.MapRoute(Ivony.Web.SimpleRouteTable,System.String,System.String,System.Object,System.String[])">
            <summary>
            映射一个路由规则
            </summary>
            <param name="routeTable">简单路由表实例</param>
            <param name="name">路由规则名称</param>
            <param name="urlPattern">URL 模式</param>
            <param name="routeValues">默认/静态路由值</param>
            <param name="queryKeys">可用于 QueryString 的路由值</param>
            <returns>返回简单路由表实例，便于链式注册</returns>
        </member>
        <member name="M:Ivony.Web.MvcRouteExtensions.MapRoute(Ivony.Web.SimpleRouteTable,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String[])">
            <summary>
            映射一个路由规则
            </summary>
            <param name="routeTable">简单路由表实例</param>
            <param name="name">路由规则名称</param>
            <param name="urlPattern">URL 模式</param>
            <param name="routeValues">默认/静态路由值</param>
            <param name="queryKeys">可用于 QueryString 的路由值</param>
            <returns>返回简单路由表实例，便于链式注册</returns>
        </member>
        <member name="M:Ivony.Web.MvcRouteExtensions.RegisterRouteBeforeSimpleRouteTable(System.Web.Routing.RouteCollection,System.Web.Routing.RouteBase)">
            <summary>
            调用此方法确保路由在简单路由表实例前注册。
            </summary>
            <param name="routes">系统路由表</param>
            <param name="route">要注册的路由</param>
        </member>
        <member name="T:Ivony.Web.SimpleAreaRouteTable">
            <summary>
            用于 MVC 的简单区域路由表，提供某一区域的简单路由服务
            </summary>
        </member>
        <member name="M:Ivony.Web.SimpleAreaRouteTable.#ctor(System.String,System.String[],System.Boolean)">
            <summary>
            构建简单区域路由表对象
            </summary>
            <param name="areaName">区域名</param>
            <param name="namespaces">区域所要搜索的命名空间</param>
            <param name="useNamespaceFallback">是否回溯搜索无 Area 命名空间</param>
        </member>
        <member name="M:Ivony.Web.SimpleAreaRouteTable.AddRule(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String[])">
            <summary>
            添加一个路由规则
            </summary>
            <param name="name">规则名称</param>
            <param name="urlPattern">URL 模式</param>
            <param name="routeValues">静态/默认路由值</param>
            <param name="queryKeys">可用于 QueryString 的参数</param>
            <returns>创建的简单路由规则</returns>
            <remarks>
            简单区域路由表会自动为路由规则增加一个静态路由值 area 保存当前区域名。
            </remarks>
        </member>
        <member name="M:Ivony.Web.SimpleAreaRouteTable.GetRouteData(System.Web.HttpContextBase)">
            <summary>
            获取请求的路由数据
            </summary>
            <param name="httpContext">HTTP 请求</param>
            <returns>路由数据</returns>
            <remarks>
            简单区域路由表获取路由数据后会自动设置区域所需的 DataTokens
            </remarks>
        </member>
        <member name="M:Ivony.Web.SimpleAreaRouteTable.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
            <summary>
            尝试从路由值创建虚拟路径
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <param name="values">路由值</param>
            <remarks>
            简单区域路由表获取路由数据后会自动设置区域所需的 DataTokens
            </remarks>
        </member>
        <member name="P:Ivony.Web.SimpleAreaRouteTable.AreaName">
            <summary>
            获取路由表所适用的区域名
            </summary>
        </member>
        <member name="P:Ivony.Web.SimpleAreaRouteTable.Namespaces">
            <summary>
            区域所要搜索的命名空间
            </summary>
        </member>
        <member name="P:Ivony.Web.SimpleAreaRouteTable.UseNamespaceFallback">
            <summary>
            是否回溯搜索无 Area 命名空间
            </summary>
        </member>
        <member name="T:Ivony.Web.WebSocketOnlyAttribute">
            <summary>
            标识 Action 只能处理 WebSocket 请求
            </summary>
        </member>
        <member name="M:Ivony.Web.WebSocketOnlyAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
            <summary>
            重写 IsValidForRequest 方法，判断当前请求是否为 WebSocket 请求
            </summary>
            <param name="controllerContext">当前控制器上下文</param>
            <param name="methodInfo">Action 方法信息</param>
            <returns>当前请求是否为 WebSocket 请求</returns>
        </member>
        <member name="T:Ivony.Web.WebSocketResult">
            <summary>
            定义一个处理 WebSocket 请求的 Result
            </summary>
        </member>
        <member name="M:Ivony.Web.WebSocketResult.#ctor(System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task})">
            <summary>
            创建 WebSocketResult 对象
            </summary>
            <param name="processer">处理函数</param>
        </member>
        <member name="M:Ivony.Web.WebSocketResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            在当前上下文执行结果
            </summary>
            <param name="context">当前控制器上下文</param>
        </member>
        <member name="P:Ivony.Web.WebSocketResult.Processer">
            <summary>
            用于处理 WebSocket 请求的处理函数
            </summary>
        </member>
    </members>
</doc>
