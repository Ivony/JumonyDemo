<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ivony.Html.Web.Mvc</name>
    </assembly>
    <members>
        <member name="T:Ivony.Html.Web.CacheFilterBase">
            <summary>
            输出缓存筛选器
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.CacheFilterBase.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            重写此方法以输出缓存
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:Ivony.Html.Web.CacheFilterBase.ResolveCache(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            尝试输出缓存
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:Ivony.Html.Web.CacheFilterBase.ResolveCache(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            尝试输出缓存
            </summary>
            <param name="context">当前请求上下文</param>
            <param name="action">当前请求的 Action</param>
            <param name="parameters">Action 的参数值</param>
            <returns>若可以缓存输出，则返回输出缓存的 ActionResult</returns>
        </member>
        <member name="M:Ivony.Html.Web.CacheFilterBase.CreateCachePolicy(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            创建缓存策略
            </summary>
            <param name="context"></param>
            <param name="action"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.CacheFilterBase.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
            <summary>
            重写 OnResultExecuting 方法以应用客户端缓存策略
            </summary>
            <param name="filterContext">筛选器上下文</param>
        </member>
        <member name="M:Ivony.Html.Web.CacheFilterBase.ApplyClientCachePolicy(System.Web.Mvc.ResultExecutingContext)">
            <summary>
            在输出任何内容前，应用客户端缓存策略
            </summary>
            <param name="filterContext">筛选器上下文</param>
        </member>
        <member name="M:Ivony.Html.Web.CacheFilterBase.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
            <summary>
            重写此方法使得操作结果执行完毕后，更新缓存信息
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:Ivony.Html.Web.CacheFilterBase.UpdateCache(System.Web.Mvc.ResultExecutedContext)">
            <summary>
            更新缓存
            </summary>
            <param name="filterContext">筛选器上下文</param>
        </member>
        <member name="M:Ivony.Html.Web.CacheFilterBase.UpdateCache(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionResult,Ivony.Html.Web.IMvcCachePolicy)">
            <summary>
            更新缓存数据
            </summary>
            <param name="context">控制器上下文</param>
            <param name="result">Action执行结果</param>
            <param name="mvcCachePolicy">MVC 缓存策略</param>
        </member>
        <member name="M:Ivony.Html.Web.CacheFilterBase.UpdateCache(Ivony.Web.ICachedResponse,System.Web.Mvc.ControllerContext,Ivony.Web.CachePolicy)">
            <summary>
            更新缓存数据
            </summary>
            <param name="cachedResponse">可被缓存的响应数据</param>
            <param name="context">MVC 请求上下文</param>
            <param name="policy">缓存策略</param>
        </member>
        <member name="M:Ivony.Html.Web.CacheFilterBase.GetCachedResponse(System.Web.Mvc.ActionResult)">
            <summary>
            从执行结果中获取可被缓存的响应数据
            </summary>
            <param name="result">Action 执行结果</param>
            <returns>可被缓存的响应数据，失败则返回 null</returns>
        </member>
        <member name="T:Ivony.Html.Web.ContentAdapter">
            <summary>
            默认的内容视图渲染代理
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.ContentAdapter.#ctor(Ivony.Html.Web.JumonyView)">
            <summary>
            创建 ContentAdapter 对象
            </summary>
            <param name="view">要渲染的内容视图</param>
        </member>
        <member name="M:Ivony.Html.Web.ContentAdapter.GetContentBody(Ivony.Html.IHtmlElement)">
            <summary>
            获取内容视图需要被的渲染内容
            </summary>
            <param name="element">位于母板视图上的 &lt;content&gt; 标签</param>
            <returns>该 &lt;content&gt; 标签需要被渲染的内容</returns>
        </member>
        <member name="M:Ivony.Html.Web.ContentAdapter.MergeHead(Ivony.Html.IHtmlElement,Ivony.Html.IHtmlElement)">
            <summary>
            合并内容视图与母板视图的文档头
            </summary>
            <param name="masterHead">母板视图的文档头</param>
            <param name="contentHead">内容视图的文档头</param>
            <returns>合并后的 &lt;head&gt; 元素</returns>
        </member>
        <member name="P:Ivony.Html.Web.ContentAdapter.View">
            <summary>
            获取内容视图
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.ContentAdapter.Document">
            <summary>
            获取内容视图文档
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.ContentAdapter.RenderAdapters">
            <summary>
            获取内容视图的渲染代理
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.ControllerCachePolicyProvider">
            <summary>
            基于 Controller 和 Action 名称提供缓存策略的缓存策略提供程序
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.IMvcCachePolicyProvider">
            <summary>
            MVC 环境的缓存策略提供程序所需要实现的接口
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.IMvcCachePolicyProvider.CreateCachePolicy(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            创建缓存策略
            </summary>
            <param name="context">控制器上下文</param>
            <param name="action">Action 信息</param>
            <param name="parameters">Action 参数</param>
            <returns>缓存策略</returns>
        </member>
        <member name="M:Ivony.Html.Web.ControllerCachePolicyProvider.#ctor">
            <summary>
            创建 ControllerCachePolicyProvider 实例
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.ControllerCachePolicyProvider.InitializeActionProviders">
            <summary>
            初始化所有 Action 缓存提供程序
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.ControllerCachePolicyProvider.CreateCachePolicy(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            创建缓存策略
            </summary>
            <param name="context">当前请求的 MVC 上下文</param>
            <param name="action">当前执行的 Action</param>
            <param name="parameters">Action 的参数</param>
            <returns>缓存策略</returns>
        </member>
        <member name="M:Ivony.Html.Web.ControllerCachePolicyProvider.CreateToken(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            创建 CacheToken
            </summary>
            <param name="typeName">类型名，一般可以取 Action 的名称</param>
            <param name="parameters">参数列表，一般可以使用 Action 的参数列表</param>
            <returns>针对指定类型和参数的 CacheToken</returns>
        </member>
        <member name="T:Ivony.Html.Web.CacheableAttribute">
            <summary>
            用于指定 Action 或 Controller 应缓存输出结果。
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.CacheableAttribute.#ctor">
            <summary>
            创建 CacheableAttribute 对象
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.CacheableAttribute.#ctor(System.Type)">
            <summary>
            利用指定的缓存策略提供程序创建 HtmlCacheableAttribute 对象。
            </summary>
            <param name="policyProviderType">缓存策略提供程序类型</param>
        </member>
        <member name="M:Ivony.Html.Web.CacheableAttribute.CreateCachePolicy(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取缓存策略
            </summary>
            <param name="context">MVC 请求上下文</param>
            <param name="action">Action 信息</param>
            <param name="parameters">Action 参数</param>
            <returns>缓存策略</returns>
        </member>
        <member name="P:Ivony.Html.Web.CacheableAttribute.CachePolicyProvider">
            <summary>
            获取缓存策略提供程序
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.ViewHandler">
            <summary>
            HTML 视图处理程序基类
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.IViewHandler">
            <summary>
            定义 HTML 视图处理程序
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.IViewHandler.ProcessScope(System.Web.Mvc.ViewContext,Ivony.Html.IHtmlContainer,Ivony.Html.Web.JumonyUrlHelper)">
            <summary>
            处理 HTML 范畴
            </summary>
            <param name="context">视图上下文</param>
            <param name="scope">要处理的 HTML 范畴</param>
            <param name="urlHelper">有关视图的虚拟路径帮助器</param>
        </member>
        <member name="M:Ivony.Html.Web.ViewHandler.Ivony#Html#Web#IViewHandler#ProcessScope(System.Web.Mvc.ViewContext,Ivony.Html.IHtmlContainer,Ivony.Html.Web.JumonyUrlHelper)">
            <summary>
            处理指定文档范畴
            </summary>
            <param name="viewContext">视图上下文</param>
            <param name="scope">要处理的范围</param>
            <param name="urlHelper">适用于当前文档的虚拟路径帮助器</param>
        </member>
        <member name="M:Ivony.Html.Web.ViewHandler.DataBind">
            <summary>
            执行数据绑定
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.ViewHandler.ProcessScope">
            <summary>
            派生类实现此方法处理 HTML 文档或文档范畴
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.ViewHandler.SetViewData(System.Web.Mvc.ViewDataDictionary)">
            <summary>
            设置视图数据，此方法仅供框架调用
            </summary>
            <param name="viewData">视图数据</param>
        </member>
        <member name="P:Ivony.Html.Web.ViewHandler.ViewContext">
            <summary>
            获取当前视图上下文
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.ViewHandler.HttpContext">
            <summary>
            获取当前 HTTP 上下文
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.ViewHandler.Scope">
            <summary>
            获取当前要处理的 HTML 范围
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.ViewHandler.Url">
            <summary>
            有关视图的虚拟路径帮助器
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.ViewHandler.VirtualPath">
            <summary>
            获取当前文档的虚拟路径
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.ViewHandler.TempData">
            <summary>
            获取与此请求关联且仅可用于一个请求的数据。
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.ViewHandler.RouteData">
            <summary>
            获取 URL 路由信息
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.ViewHandler.ViewData">
            <summary>
            获取或设置视图数据
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.ViewHandler.Model">
            <summary>
            获取模型
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.HtmlViewHandlerWrapper.#ctor(Ivony.Html.Web.IHtmlHandler)">
            <summary>
            为现有的 IHtmlHandler 对象创建 ViewHandler 包装
            </summary>
            <param name="handler">现有的 IHtmlHandler 对象</param>
        </member>
        <member name="M:Ivony.Html.Web.HtmlViewHandlerWrapper.ProcessScope">
            <summary>
            重写 ProcessScope 方法，重定向到被包装的 Handler
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.IViewFilterProvider">
            <summary>
            定义视图筛选器提供程序
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.IViewFilterProvider.GetFilters(System.String)">
            <summary>
            获取指定虚拟路径所使用的视图筛选器
            </summary>
            <param name="virtualPath">虚拟路径</param>
            <returns>视图筛选器</returns>
        </member>
        <member name="T:Ivony.Html.Web.IViewHandlerProvider">
            <summary>
            定义 ViewHandler 对象提供程序
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.IViewHandlerProvider.FindViewHandler(System.String)">
            <summary>
            查找 ViewHandler 对象
            </summary>
            <param name="virtualPath">视图虚拟路径</param>
            <returns>要用于处理视图的 ViewHandler 对象</returns>
        </member>
        <member name="T:Ivony.Html.Web.MvcFormValidationResult">
            <summary>
            将 MVC 框架的 ModelState 包装为 IFormValidationReult 对象的实现类。
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.MvcFormValidationResult.#ctor(Ivony.Html.Forms.HtmlForm,System.Web.Mvc.ModelStateDictionary)">
            <summary>
            创建 MvcFormValidationResult 对象
            </summary>
            <param name="modelStates">要包装的模型验证状态</param>
        </member>
        <member name="P:Ivony.Html.Web.MvcFormValidationResult.HasError">
            <summary>
            是否存在表单验证错误
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.MvcFormValidationResult.Errors">
            <summary>
            表单验证错误
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.MvcFormValidationResult.Form">
            <summary>
            所验证的表单
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.ViewHandlerProvider">
            <summary>
            提供视图处理程序
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.ViewHandlerProvider.GetViewHandler(System.String)">
            <summary>
            获取视图处理程序
            </summary>
            <param name="virtualPath">视图的虚拟路径</param>
            <returns>该虚拟路径的视图处理程序</returns>
        </member>
        <member name="M:Ivony.Html.Web.ViewHandlerProvider.GetMasterViewHandler(System.String)">
            <summary>
            查找母板视图的处理程序
            </summary>
            <param name="virtualPath">母板视图虚拟路径</param>
            <returns>视图处理程序</returns>
        </member>
        <member name="M:Ivony.Html.Web.ViewHandlerProvider.GetViewHandlerInternal(System.String,System.Boolean)">
            <summary>
            获取视图处理程序
            </summary>
            <param name="virtualPath">视图的虚拟路径</param>
            <param name="includeDefaultHandler">是否要查找默认视图处理程序</param>
            <returns>该虚拟路径的视图处理程序</returns>
        </member>
        <member name="M:Ivony.Html.Web.ViewHandlerProvider.GetHandlerPath(Ivony.Html.IHtmlContainer)">
            <summary>
            在 HTML 文档中查找 ViewHandler 路径设置。
            </summary>
            <param name="Scope">要处理的 HTML 文档范畴</param>
            <returns>用于处理 HTML 的视图处理程序路径</returns>
        </member>
        <member name="T:Ivony.Html.Web.ICacheableResult">
            <summary>
            定义可被缓存的 ActionResult
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.ICacheableResult.GetCachedResponse">
            <summary>
            获取缓存的响应
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ivony.Html.Web.CacheableResultHelper">
            <summary>
            提供 ICacheableResult 的一些扩展
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.CacheableResultHelper.GetCachedResult(Ivony.Html.Web.ICacheableResult)">
            <summary>
            获取用于输出缓存的 ActionResult
            </summary>
            <param name="cachable">已被缓存的响应信息</param>
            <returns>用于输出缓存的 ActionResult</returns>
        </member>
        <member name="M:Ivony.Html.Web.CacheableResultHelper.ToCachedResult(Ivony.Web.ICachedResponse)">
            <summary>
            从缓存的输出创建一个 ActionResult
            </summary>
            <param name="response">已被缓存的输出</param>
            <returns>用于输出缓存的 ActionResult</returns>
        </member>
        <member name="T:Ivony.Html.Web.IContentView">
            <summary>
            可使用母板页的内容视图
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.IContentView.InitializeMaster(Ivony.Html.Web.IMasterView)">
            <summary>
            初始化母板
            </summary>
            <param name="master">母板视图</param>
        </member>
        <member name="M:Ivony.Html.Web.IContentView.CreateContentAdapter(Ivony.Html.Web.IMasterView)">
            <summary>
            创建内容渲染代理
            </summary>
            <param name="master">所使用的母板视图</param>
            <returns>用于渲染内容视图的渲染代理</returns>
        </member>
        <member name="T:Ivony.Html.Web.ICustomRenderAdapters">
            <summary>
            需要提供自定义渲染代理的视图处理程序实现此接口
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.ICustomRenderAdapters.GetCustomRenderAdapters">
            <summary>
            提供自定义渲染代理
            </summary>
            <returns>自定义的渲染代理</returns>
        </member>
        <member name="T:Ivony.Html.Web.IMasterView">
            <summary>
            定义母板视图
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.IMasterView.Initialize(System.Web.Mvc.ViewContext)">
            <summary>
            初始化母板视图
            </summary>
            <param name="context">视图上下文</param>
        </member>
        <member name="M:Ivony.Html.Web.IMasterView.Render(Ivony.Html.Web.IContentView)">
            <summary>
            渲染母板视图
            </summary>
            <param name="view">内容视图</param>
            <returns>渲染结果</returns>
        </member>
        <member name="T:Ivony.Html.Web.IMvcCachePolicy">
            <summary>
            定义 MVC 上下文相关的缓存策略
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.IMvcCachePolicy.UpdateCache(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionResult)">
            <summary>
            创建缓存项
            </summary>
            <param name="context">当前 MVC 上下文</param>
            <param name="result">要缓存的执行结果</param>
            <returns></returns>
        </member>
        <member name="T:Ivony.Html.Web.IViewFilter">
            <summary>
            定义视图筛选器
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.IViewFilter.OnPreProcess(System.Web.Mvc.ViewContext,Ivony.Html.Web.JumonyView)">
            <summary>
            在处理 HTML 文档之前由 Jumony 框架调用
            </summary>
            <param name="context">视图上下文</param>
            <param name="view">正在负责处理的视图对象</param>
        </member>
        <member name="M:Ivony.Html.Web.IViewFilter.OnPostProcess(System.Web.Mvc.ViewContext,Ivony.Html.Web.JumonyView)">
            <summary>
            在处理 HTML 文档之后由 Jumony 框架调用
            </summary>
            <param name="context">视图上下文</param>
            <param name="view">正在负责处理的视图对象</param>
        </member>
        <member name="M:Ivony.Html.Web.IViewFilter.OnPreRender(System.Web.Mvc.ViewContext,Ivony.Html.Web.JumonyView)">
            <summary>
            在渲染 HTML 文档之前由 Jumony 框架调用
            </summary>
            <param name="context">视图上下文</param>
            <param name="view">正在负责处理的视图对象</param>
        </member>
        <member name="M:Ivony.Html.Web.IViewFilter.OnPostRender(System.Web.Mvc.ViewContext,Ivony.Html.Web.JumonyView)">
            <summary>
            在渲染 HTML 文档之后由 Jumony 框架调用
            </summary>
            <param name="context">视图上下文</param>
            <param name="view">正在负责处理的视图对象</param>
        </member>
        <member name="T:Ivony.Html.Web.IChildViewFilter">
            <summary>
            实现此接口标识筛选器也应用于其所应用页面的子视图
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.IMasterViewFiler">
            <summary>
            实现此接口标识筛选器可以应用于母板视图
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.ViewFilterAttribute">
            <summary>
            表示所有视图筛选器特性的基类
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.ViewFilterAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            重写 OnActionExecuting 方法，不进行任何操作
            </summary>
            <param name="filterContext">筛选器上下文</param>
        </member>
        <member name="M:Ivony.Html.Web.ViewFilterAttribute.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            重写 OnActionExecuted 方法，不进行任何操作
            </summary>
            <param name="filterContext">筛选器上下文</param>
        </member>
        <member name="M:Ivony.Html.Web.ViewFilterAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
            <summary>
            重写 OnResultExecuting 方法，在 ViewData 中注册视图筛选器
            </summary>
            <param name="filterContext">筛选器上下文</param>
        </member>
        <member name="M:Ivony.Html.Web.ViewFilterAttribute.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
            <summary>
            重写 OnResultExecuted 方法，不进行任何操作
            </summary>
            <param name="filterContext">筛选器上下文</param>
        </member>
        <member name="M:Ivony.Html.Web.ViewFilterAttribute.OnPreProcess(System.Web.Mvc.ViewContext,Ivony.Html.Web.JumonyView)">
            <summary>
            在处理 HTML 文档之前由 Jumony 框架调用
            </summary>
            <param name="context">视图上下文</param>
            <param name="view">正在负责处理的视图对象</param>
        </member>
        <member name="M:Ivony.Html.Web.ViewFilterAttribute.OnPostProcess(System.Web.Mvc.ViewContext,Ivony.Html.Web.JumonyView)">
            <summary>
            在处理 HTML 文档之后由 Jumony 框架调用
            </summary>
            <param name="context">视图上下文</param>
            <param name="view">正在负责处理的视图对象</param>
        </member>
        <member name="M:Ivony.Html.Web.ViewFilterAttribute.OnPreRender(System.Web.Mvc.ViewContext,Ivony.Html.Web.JumonyView)">
            <summary>
            在渲染 HTML 文档之前由 Jumony 框架调用
            </summary>
            <param name="context">视图上下文</param>
            <param name="view">正在负责处理的视图对象</param>
        </member>
        <member name="M:Ivony.Html.Web.ViewFilterAttribute.OnPostRender(System.Web.Mvc.ViewContext,Ivony.Html.Web.JumonyView)">
            <summary>
            在渲染 HTML 文档之后由 Jumony 框架调用
            </summary>
            <param name="context">视图上下文</param>
            <param name="view">正在负责处理的视图对象</param>
        </member>
        <member name="T:Ivony.Html.Web.IViewProvider">
            <summary>
            自定义视图提供程序
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.IViewProvider.TryCreateView(System.Web.Mvc.ControllerContext,System.Web.Hosting.VirtualPathProvider,System.String,System.Boolean)">
            <summary>
            尝试创建自定义视图对象
            </summary>
            <param name="context">上下文信息</param>
            <param name="provider">用于获取虚拟文件的虚拟路径提供程序</param>
            <param name="virtualPath">用于查找视图的虚拟路径</param>
            <param name="isPartial">是否应创建部分视图</param>
            <returns>自定义视图对象</returns>
        </member>
        <member name="T:Ivony.Html.Web.JumonyUrlHelper">
            <summary>
            扩展 UrlHelper 提供 Jumony 特有的方法。
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyUrlHelper.#ctor(System.Web.Routing.RequestContext,System.String)">
            <summary>
            创建 JumonyUrlHelper 实例
            </summary>
            <param name="requestContext">请求上下文</param>
            <param name="virtualPath">当前请求文档的虚拟路径</param>
        </member>
        <member name="M:Ivony.Html.Web.JumonyUrlHelper.ProcessActionUrls(Ivony.Html.IHtmlContainer)">
            <summary>
            处理所有 Action 路由
            </summary>
            <param name="container">包含所有要处理元素的 HTML 容器</param>
        </member>
        <member name="M:Ivony.Html.Web.JumonyUrlHelper.SetRouteValues(Ivony.Html.IHtmlElement,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            为指定元素设置路由参数值，此设置会覆盖元素属性上同名路由参数的设置。
            </summary>
            <param name="element">要设置路由参数的元素</param>
            <param name="routeValues">要设置的路由参数</param>
            <exception cref="T:System.NotSupportedException">元素没有支持路由的属性</exception>
        </member>
        <member name="M:Ivony.Html.Web.JumonyUrlHelper.GetRouteUrl(Ivony.Html.IHtmlElement)">
            <summary>
            从元素标签中获取路由的虚拟路径
            </summary>
            <param name="element">要获取分析路由虚拟路径的元素</param>
            <returns>获取的虚拟路径</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyUrlHelper.GetRouteUrl(Ivony.Html.IHtmlElement,System.Boolean)">
            <summary>
            从元素标签中获取路由的虚拟路径
            </summary>
            <param name="element">要获取分析路由虚拟路径的元素</param>
            <param name="clearRouteAttributes">是否清理路由属性设置</param>
            <returns>获取的虚拟路径</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyUrlHelper.GetRouteValues(Ivony.Html.IHtmlElement)">
            <summary>
            从元素标签中获取所有的路由值
            </summary>
            <param name="element">要获取分析路由值的元素</param>
            <returns>获取的路由值</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyUrlHelper.ResolveUri(Ivony.Html.IHtmlContainer)">
            <summary>
            转换容器中所有 URI 与当前请求匹配。
            </summary>
            <param name="container">确定要转换 URI 范围的容器</param>
        </member>
        <member name="M:Ivony.Html.Web.JumonyUrlHelper.ResolveUri(Ivony.Html.IHtmlContainer,System.String)">
            <summary>
            转换容器中所有 URI 与当前请求匹配。
            </summary>
            <param name="container">确定要转换 URI 范围的容器</param>
            <param name="baseVirtualPath">容器的基路径</param>
        </member>
        <member name="M:Ivony.Html.Web.JumonyUrlHelper.ResolveUri(Ivony.Html.IHtmlAttribute,System.String)">
            <summary>
            转换 URI 与当前请求匹配
            </summary>
            <param name="attribute">HTML 属性</param>
            <param name="baseVirtualPath">基路径</param>
        </member>
        <member name="M:Ivony.Html.Web.JumonyUrlHelper.ResolveVirtualPath(System.String,System.String)">
            <summary>
            转换虚拟路径
            </summary>
            <param name="baseVirtualPath">基路径</param>
            <param name="virtualPath">设置的虚拟路径（相对或绝对）</param>
            <returns></returns>
        </member>
        <member name="P:Ivony.Html.Web.JumonyUrlHelper.VirtualPath">
            <summary>
            视图基路径
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.JumonyView">
            <summary>
            Jumony 视图
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.ViewBase">
            <summary>
            所有 HTML 视图处理程序的基类，实现 IView 接口，并提供内置的 HTML 扩展功能以及视图结果的缓存。
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.ViewBase.Initialize(System.String,System.Boolean)">
            <summary>
            初始化视图设置
            </summary>
            <param name="virtualPath">虚拟路径</param>
            <param name="partialMode">是否为部分视图模式</param>
        </member>
        <member name="M:Ivony.Html.Web.ViewBase.LoadDocument(System.String,System.Web.Caching.CacheDependency@)">
            <summary>
            派生类可以重写此方法自定义加载虚拟路径处的文档的逻辑
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.ViewBase.InitializeScope(System.String,System.Boolean,System.Web.Caching.CacheDependency@)">
            <summary>
            初始化视图渲染范畴
            </summary>
            <returns>渲染和处理的范畴，一般情况下是 IHtmlDocument</returns>
        </member>
        <member name="M:Ivony.Html.Web.ViewBase.GetPartialScope(Ivony.Html.IHtmlDocument)">
            <summary>
            查找部分视图渲染范畴
            </summary>
            <param name="document">加载的文档</param>
            <returns>渲染范畴</returns>
        </member>
        <member name="M:Ivony.Html.Web.ViewBase.InitializeView(System.Web.Mvc.ViewContext)">
            <summary>
            初始化视图，准备处理和渲染
            </summary>
            <param name="viewContext">视图上下文</param>
        </member>
        <member name="M:Ivony.Html.Web.ViewBase.RenderCore(System.IO.TextWriter)">
            <summary>
            处理和渲染视图
            </summary>
            <param name="writer">文本编写器</param>
        </member>
        <member name="M:Ivony.Html.Web.ViewBase.RenderCore(Ivony.Html.IHtmlContainer)">
            <summary>
            实现处理和渲染逻辑
            </summary>
            <param name="scope">要渲染的范畴</param>
            <returns>渲染后的字符串</returns>
        </member>
        <member name="M:Ivony.Html.Web.ViewBase.UpdateCache(System.String)">
            <summary>
            更新缓存
            </summary>
            <param name="content">渲染结果</param>
        </member>
        <member name="P:Ivony.Html.Web.ViewBase.ViewContext">
            <summary>
            获取视图上下文
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.ViewBase.HttpContext">
            <summary>
            获取当前 HTTP 上下文
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.ViewBase.RawViewContext">
            <summary>
            获取原始的（顶层的）视图上下文
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.ViewBase.VirtualPath">
            <summary>
            视图的虚拟路径
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.ViewBase.PartialMode">
            <summary>
            是否为部分视图
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.ViewBase.Scope">
            <summary>
            获取渲染和处理的范畴
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.ViewBase.ScopeCacheDependency">
            <summary>
            当前 HTML 文档或处理范畴缓存依赖项
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.ViewBase.CachedResponse">
            <summary>
            缓存结果
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyView.InitializeView(System.Web.Mvc.ViewContext)">
            <summary>
            重写 InitializeView 方法，增加 Jumony 视图初始化步骤
            </summary>
            <param name="viewContext">视图上下文</param>
        </member>
        <member name="M:Ivony.Html.Web.JumonyView.InitailizeJumonyView(System.Web.Mvc.ViewContext)">
            <summary>
            Jumony 视图初始化
            </summary>
            <param name="viewContext">视图上下文</param>
        </member>
        <member name="M:Ivony.Html.Web.JumonyView.GetFilters(System.Web.Mvc.ViewContext)">
            <summary>
            获取当前视图所需要应用的筛选器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyView.GetHandler(System.String)">
            <summary>
            获取视图处理程序
            </summary>
            <returns>视图处理程序</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyView.GetRenderAdapters(Ivony.Html.Web.IViewHandler)">
            <summary>
            获取 HTML 渲染代理
            </summary>
            <remarks>
            默认的渲染代理包含一个：
            1. 部分视图渲染代理，处理 &lt;partial&gt; 标签
            </remarks>
            <returns>HTML 渲染代理列表</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyView.RenderCore(Ivony.Html.IHtmlContainer)">
            <summary>
            处理和渲染指定 HTML 范畴
            </summary>
            <param name="scope">要处理和渲染的范畴</param>
            <returns>渲染结果</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyView.AddGeneratorMetaData">
            <summary>
            添加 &lt;meta name="generator" value="Jumony" /&gt; 标记
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyView.OnPreProcess">
            <summary>
            引发 PreProcess 事件
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyView.OnPostProcess">
            <summary>
            引发 PostProcess 事件
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyView.OnPreRender">
            <summary>
            引发 PreRender 事件
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyView.OnPostRender">
            <summary>
            引发 PostRender 事件
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyView.ProcessScope(Ivony.Html.Web.IViewHandler)">
            <summary>
            处理 HTML 文档
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyView.CreateViewContext">
            <summary>
            创建一个视图上下文供视图处理程序使用
            </summary>
            <returns>视图上下文</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyView.ProcessMaster(Ivony.Html.Web.JumonyMasterView)">
            <summary>
            派生类实现此方法处理母板视图
            </summary>
            <param name="MasterView">页面的母板视图</param>
        </member>
        <member name="M:Ivony.Html.Web.JumonyView.RenderContent(Ivony.Html.IHtmlRenderAdapter[])">
            <summary>
            渲染 HTML 内容
            </summary>
            <returns>渲染结果</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyView.RenderContent(Ivony.Html.IHtmlContainer,System.Boolean,Ivony.Html.IHtmlRenderAdapter[])">
            <summary>
            渲染 HTML 内容。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ivony.Html.Web.JumonyView.MasterView">
            <summary>
            母板视图
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.JumonyView.Url">
            <summary>
            获取用于生成应用程序 URL 的帮助器
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.JumonyView.RenderAdapters">
            <summary>
            渲染代理列表
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.JumonyView.Filters">
            <summary>
            获取所有视图筛选器
            </summary>
        </member>
        <member name="E:Ivony.Html.Web.JumonyView.PreProcess">
            <summary>
            初始化结束后，进行任何处理前引发此事件
            </summary>
        </member>
        <member name="E:Ivony.Html.Web.JumonyView.PostProcess">
            <summary>
            对文档的所有处理完成后引发此事件
            </summary>
        </member>
        <member name="E:Ivony.Html.Web.JumonyView.PreRender">
            <summary>
            完成所有渲染准备工作后，渲染文档之前引发此事件。
            </summary>
        </member>
        <member name="E:Ivony.Html.Web.JumonyView.PostRender">
            <summary>
            文档渲染完毕后引发此事件
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.JumonyMasterView">
            <summary>
            母板页视图
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyMasterView.Initialize(System.String)">
            <summary>
            初始化母板页视图
            </summary>
            <param name="virtualPath">母板页路径</param>
        </member>
        <member name="M:Ivony.Html.Web.JumonyMasterView.RenderCore(Ivony.Html.IHtmlContainer)">
            <summary>
            重写此方法以屏蔽直接渲染母板视图
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyMasterView.System#Web#Mvc#IView#Render(System.Web.Mvc.ViewContext,System.IO.TextWriter)">
            <summary>
            重写此方法以屏蔽直接渲染母板视图
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyMasterView.GetFilters(System.Web.Mvc.ViewContext)">
            <summary>
            重写 InitializeFilters 方法，只返回支持母板页的筛选器
            </summary>
            <param name="context">视图上下文</param>
            <returns>所适用的筛选器</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyMasterView.GetHandler(System.String)">
            <summary>
            重写 GetHandler 方法，使用母板视图的查找规则
            </summary>
            <param name="virtualPath">当前视图的虚拟路径</param>
            <returns></returns>
        </member>
        <member name="P:Ivony.Html.Web.JumonyMasterView.Document">
            <summary>
            母板页文档
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.JumonyViewHandler">
            <summary>
            Jumony 视图处理程序，继承此类型可以获得最完整的 Jumony 视图逻辑重写
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyViewHandler.Find(System.String)">
            <summary>
            在处理范畴内查找符合选择器的元素
            </summary>
            <param name="expression">CSS 选择器表达式</param>
            <returns>符合选择器的元素</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyViewHandler.FindSingle(System.String)">
            <summary>
            在处理范畴内查找符合选择器的唯一元素
            </summary>
            <param name="expression">CSS 选择器表达式</param>
            <returns>符合选择器的唯一元素</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyViewHandler.FindFirst(System.String)">
            <summary>
            在处理范畴内查找符合选择器的首个元素
            </summary>
            <param name="expression">CSS 选择器表达式</param>
            <returns>符合选择器的首个元素</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyViewHandler.FindLast(System.String)">
            <summary>
            在处理范畴内查找符合选择器的最后一个元素
            </summary>
            <param name="expression">CSS 选择器表达式</param>
            <returns>符合选择器的最后一个元素</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyViewHandler.ForFirst(System.String,System.Action{Ivony.Html.IHtmlElement})">
            <summary>
            对处理范畴内查找符合选择器的首个元素进行处理
            </summary>
            <param name="expression">CSS 选择器表达式</param>
            <param name="action">要进行的处理</param>
        </member>
        <member name="M:Ivony.Html.Web.JumonyViewHandler.ForSingle(System.String,System.Action{Ivony.Html.IHtmlElement})">
            <summary>
            对处理范畴内查找符合选择器的唯一元素进行处理
            </summary>
            <param name="expression">CSS 选择器表达式</param>
            <param name="action">要进行的处理</param>
        </member>
        <member name="M:Ivony.Html.Web.JumonyViewHandler.ForLast(System.String,System.Action{Ivony.Html.IHtmlElement})">
            <summary>
            对处理范畴内查找符合选择器的最后一个元素进行处理
            </summary>
            <param name="expression">CSS 选择器表达式</param>
            <param name="action">要进行的处理</param>
        </member>
        <member name="M:Ivony.Html.Web.JumonyViewHandler.ForAll(System.String,System.Action{Ivony.Html.IHtmlElement})">
            <summary>
            对处理范畴内查找符合选择器的所有元素进行处理
            </summary>
            <param name="expression">CSS 选择器表达式</param>
            <param name="action">要进行的处理</param>
        </member>
        <member name="P:Ivony.Html.Web.JumonyViewHandler.ViewModel">
            <summary>
            获取视图模型
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.JumonyViewHandler.ViewData">
            <summary>
            获取视图数据
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.JumonyViewHandler.Trace">
            <summary>
            获取当前 HTTP 响应的追踪上下文对象
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.JumonyViewHandler.RequestContext">
            <summary>
            获取请求上下文
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.JumonyViewHandler.RouteData">
            <summary>
            获取路由信息
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.JumonyViewHandler.TempData">
            <summary>
            获取 TempData
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.JumonyViewHandler.Cache">
            <summary>
            获取缓存提供对象
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.JumonyViewLocationCache">
            <summary>
            实现 IViewLocationCache 接口
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyViewLocationCache.GetViewLocation(System.Web.HttpContextBase,System.String)">
            <summary>
            获取视图位置
            </summary>
            <param name="httpContext">当前请求上下文</param>
            <param name="key">要查找的视图键</param>
            <returns>缓存的视图位置，如果有的话</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyViewLocationCache.InsertViewLocation(System.Web.HttpContextBase,System.String,System.String)">
            <summary>
            插入视图位置缓存
            </summary>
            <param name="httpContext">当前请求上下文</param>
            <param name="key"></param>
            <param name="virtualPath"></param>
        </member>
        <member name="T:Ivony.Html.Web.MvcCachePolicyProviderWrapper">
            <summary>
            包装原始的 ICachePolicyProvider 对象，使其成为一个 IMvcCachePolicyProvider 对象
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.MvcCachePolicyProviderWrapper.#ctor(Ivony.Web.ICachePolicyProvider)">
            <summary>
            创建 MvcCachePolicyProviderWrapper 对象
            </summary>
            <param name="provider">需要被包装的原始的 ICachePolicyProvider 对象</param>
        </member>
        <member name="T:Ivony.Html.Web.MvcConfiguration">
            <summary>
            保存 Jumony for MVC 的一些配置信息
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.MvcConfiguration.IgnorePartialRenderException">
            <summary>
            忽略部分视图渲染异常，继续渲染页面其它部分，默认为 false
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.MvcConfiguration.EnableParallelPartialRender">
            <summary>
            是否允许并行进行部分视图渲染，默认值为 false
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.MvcConfiguration.PartialRenderTimeout">
            <summary>
            获取或设置部分视图的渲染超时时间，设置为任何小于等于零的时间都等于没有渲染超时。默认为零
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.MvcConfiguration.DisableGeneratorTag">
            <summary>
            指示是否禁止生成generator的meta标签，默认是 false 。
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.MvcConfiguration.FallbackDefaultMaster">
            <summary>
            指示视图引擎查找默认母板时是否应上溯查找，默认是false，即只在本文件夹查找，不上溯到父级文件夹。
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.MvcConfiguration.FallbackCachePolicy">
            <summary>
            指示在 ASP.NET MVC 应用中，如果找不到合适的缓存策略，是否应当回溯查找传统的缓存策略提供程序。
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.MvcFormExtensions">
            <summary>
            有关 MVC 的一些表单方法扩展
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.MvcFormExtensions.ApplyValues(Ivony.Html.Forms.HtmlForm,System.Object)">
            <summary>
            在表单上应用指定模型的值
            </summary>
            <param name="form">要应用的表单</param>
            <param name="dataModel">要应用的模型值</param>
            <returns>返回表单，便于链式调用</returns>
        </member>
        <member name="M:Ivony.Html.Web.MvcFormExtensions.ApplyValues(Ivony.Html.Forms.HtmlForm,System.Web.Mvc.IValueProvider)">
            <summary>
            在表单上应用指定值提供程序的值
            </summary>
            <param name="form">要应用的表单</param>
            <param name="valueProvider">提供值的 ValueProvider 实例</param>
            <returns>返回表单，便于链式调用</returns>
        </member>
        <member name="T:Ivony.Html.Web.PartialViewAdapter">
            <summary>
            用于渲染部分视图的 HTML 渲染代理
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.PartialViewAdapter.MakeHelper">
            <summary>
            创建 HtmlHelper 对象
            </summary>
            <returns>创建的 HtmlHelper 对象</returns>
        </member>
        <member name="M:Ivony.Html.Web.PartialViewAdapter.#ctor(System.Web.Mvc.ViewContext,Ivony.Html.Web.JumonyUrlHelper,Ivony.Html.Web.IViewHandler)">
            <summary>
            创建 PartialRenderAdapter 实例
            </summary>
            <param name="urlHelper">用于产生 URL 的 URL 帮助器</param>
            <param name="viewContext">当前视图上下文</param>
            <param name="viewHandler">当前视图处理程序</param>
        </member>
        <member name="M:Ivony.Html.Web.PartialViewAdapter.RenderPartial(Ivony.Html.IHtmlElement)">
            <summary>
            渲染部分视图（重写此方法以实现自定义输出 partial 元素）
            </summary>
            <param name="partialElement">partial 元素</param>
            <returns></returns>
        </member>
        <member name="P:Ivony.Html.Web.PartialViewAdapter.ViewContext">
            <summary>
            获取当前视图上下文
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.PartialViewAdapter.Url">
            <summary>
            当前 Url 帮助器
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.PartialViewAdapter.ViewHandler">
            <summary>
            获取当前视图处理程序
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.JumonyViewEngine">
            <summary>
            基于 Jumony 技术的视图引擎
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyViewEngine.#ctor">
            <summary>
            创建 JumonyViewEngine 对象
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyViewEngine.CreatePartialView(System.Web.Mvc.ControllerContext,System.String)">
            <summary>
            创建部分视图
            </summary>
            <param name="controllerContext"></param>
            <param name="partialPath"></param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyViewEngine.CreateView(System.Web.Mvc.ControllerContext,System.String,System.String)">
            <summary>
            创建页面视图
            </summary>
            <param name="controllerContext">控制器上下文</param>
            <param name="viewPath">视图路径</param>
            <param name="masterPath">母板路径</param>
            <exception cref="T:System.NotSupportedException">当 masterPath 参数不为空，且当前创建的视图不支持母板时引发</exception>
            <returns>页面视图对象</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyViewEngine.CreateMaster(System.Web.Mvc.ControllerContext,System.String)">
            <summary>
            创建视图母板
            </summary>
            <param name="controllerContext">控制器上下文</param>
            <param name="masterPath">母板路径</param>
            <returns>创建的视图母板</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyViewEngine.CreateViewCore(System.Web.Mvc.ControllerContext,System.String,System.Boolean)">
            <summary>
            创建视图对象
            </summary>
            <param name="context">控制器上下文</param>
            <param name="virtualPath">视图虚拟路径</param>
            <param name="isPartial">是否为部分视图</param>
            <returns>视图对象</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyViewEngine.CreateViewCore(System.Web.Mvc.ControllerContext,System.String,System.Boolean,Ivony.Html.Web.IViewProvider@)">
            <summary>
            创建视图对象
            </summary>
            <param name="context">控制器上下文</param>
            <param name="virtualPath">视图虚拟路径</param>
            <param name="isPartial">是否为部分视图</param>
            <param name="viewProvider">产生该视图的视图提供程序</param>
            <returns>视图对象</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyViewEngine.TryCreateViewHandler(System.String,System.Boolean)">
            <summary>
            尝试创建自定义视图处理程序对象
            </summary>
            <param name="virtualPath">视图虚拟路径</param>
            <param name="isPartial">是否应创建为部分视图</param>
            <returns>若有自定义视图处理程序，则返回。</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyViewEngine.OnViewCreated(Ivony.Html.Web.JumonyViewEventArgs)">
            <summary>
            引发 ViewCreated 事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Ivony.Html.Web.JumonyViewEngine.ViewProviders">
            <summary>
            获取或设置自定义视图提供程序
            </summary>
        </member>
        <member name="E:Ivony.Html.Web.JumonyViewEngine.ViewCreated">
            <summary>
            当视图被成功创建时发生
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.JumonyViewEventArgs">
            <summary>
            为 Jumony 视图引擎事件提供参数
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.JumonyViewEventArgs.View">
            <summary>
            获取创建的视图对象
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.JumonyViewEventArgs.ViewProvider">
            <summary>
            获取创建视图对象的 ViewProvider ，若不是由自定义视图提供程序创建，则为 null
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.ViewHandler`1">
            <summary>
            强类型 HTML 视图处理程序的基类
            </summary>
            <typeparam name="TModel">Model 的类型</typeparam>
        </member>
        <member name="M:Ivony.Html.Web.ViewHandler`1.SetViewData(System.Web.Mvc.ViewDataDictionary)">
            <summary>
            重写 SetViewData 方法使用强类型视图
            </summary>
            <param name="viewData"></param>
        </member>
        <member name="P:Ivony.Html.Web.ViewHandler`1.ViewData">
            <summary>
            获取或设置视图数据
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.ViewHandler`1.Model">
            <summary>
            获取模型
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.MvcEnvironment">
            <summary>
            提供 Jumony for MVC 的环境支持
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.MvcEnvironment.Initialize">
            <summary>
            此方法由 ASP.NET 4 系统调用，不应从用户代码中直接调用。
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.MvcEnvironment.CreateCachePolicy(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取当前请求的缓存策略
            </summary>
            <param name="context">当前请求的 MVC 上下文</param>
            <param name="action">请求的 Action</param>
            <param name="parameters">Action 的参数信息</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.MvcEnvironment.GetAreaName(System.Web.Mvc.ControllerContext)">
            <summary>
            获取当前 Controller 所属的 Area
            </summary>
            <remarks>注意，即使当前请求属于某个 Area ，如果执行的 Controller 的类型不属于这个区域的命名空间，此方法仍然会返回 null （即执行的是无区域的 Controller）</remarks>
            <param name="context">当前执行的控制器上下文</param>
            <returns>所属的 Area</returns>
        </member>
        <member name="P:Ivony.Html.Web.MvcEnvironment.JumonyViewEngine">
            <summary>
            获取 Jumony 视图引擎的默认实例
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.MvcEnvironment.SimpleRouteTable">
            <summary>
            获取简单路由表的默认内建实例
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.MvcEnvironment.Configuration">
            <summary>
            获取 Jumony for MVC 配置对象，可以对 Jumony for MVC 行为进行调整。
            </summary>
        </member>
        <member name="E:Ivony.Html.Web.MvcEnvironment.ViewCreated">
            <summary>
            当任何一个 JumonyViewEngine 对象成功创建了视图时发生。
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.MvcEnvironment.CacheStorageProvider">
            <summary>
            获取默认的缓存储存提供程序
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.MvcEnvironment.FallbackCachePolicyProvider">
            <summary>
            回溯到传统的缓存策略，如果要获取当前请求的传统缓存策略，则使用这个缓存策略提供程序。
            </summary>
        </member>
    </members>
</doc>
